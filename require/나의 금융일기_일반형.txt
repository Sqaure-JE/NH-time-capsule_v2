import React, { useState } from 'react';
import { ChevronLeft, Camera, TrendingUp, TrendingDown, Wallet, Star, BarChart3 } from 'lucide-react';

export default function GeneralFinancialDiary() {
  const [selectedEmotion, setSelectedEmotion] = useState('');
  const [transactionType, setTransactionType] = useState('expense');
  const [amount, setAmount] = useState('');
  const [category, setCategory] = useState('');
  const [content, setContent] = useState('');
  const [hasImage, setHasImage] = useState(false);

  // 5가지 감정 캐릭터
  const emotions = [
    { id: 'joy', emoji: '😊', name: '기쁨이', color: '#FFD700' },
    { id: 'sadness', emoji: '😢', name: '슬픔이', color: '#4A90E2' },
    { id: 'anger', emoji: '😡', name: '분노', color: '#FF4444' },
    { id: 'fear', emoji: '😰', name: '불안이', color: '#9B59B6' },
    { id: 'disgust', emoji: '🤢', name: '까칠이', color: '#2ECC71' }
  ];

  // 일반 소비/수입 카테고리
  const expenseCategories = [
    { id: 'food', name: '식비', emoji: '🍽️' },
    { id: 'transport', name: '교통비', emoji: '🚗' },
    { id: 'shopping', name: '쇼핑', emoji: '🛍️' },
    { id: 'entertainment', name: '여가', emoji: '🎮' },
    { id: 'medical', name: '의료비', emoji: '🏥' },
    { id: 'education', name: '교육', emoji: '📚' },
    { id: 'other', name: '기타', emoji: '💫' }
  ];

  const incomeCategories = [
    { id: 'salary', name: '급여', emoji: '💼' },
    { id: 'allowance', name: '용돈', emoji: '💝' },
    { id: 'investment', name: '투자수익', emoji: '📈' },
    { id: 'side', name: '부업', emoji: '💻' },
    { id: 'other', name: '기타', emoji: '💫' }
  ];

  // 오늘의 금융 활동 (자동 연동)
  const todayTransactions = [
    { name: '스타벅스 강남점', amount: '-5,600', type: 'expense', category: '식비' },
    { name: '급여 입금', amount: '+2,450,000', type: 'income', category: '급여' },
    { name: '지하철', amount: '-1,400', type: 'expense', category: '교통비' }
  ];

  const selectedEmotionData = emotions.find(e => e.id === selectedEmotion);
  const currentCategories = transactionType === 'expense' ? expenseCategories : incomeCategories;

  const handleSave = () => {
    const points = 30 + (hasImage ? 15 : 0); // 일반 일기는 포인트 적음
    alert(`💾 금융일기가 저장되었습니다!\n${selectedEmotionData?.name}와 함께 ${points}P 적립!`);
  };

  const formatAmount = (value) => {
    return value.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  };

  return (
    <div className="min-h-screen bg-gray-50 max-w-md mx-auto">
      {/* 헤더 */}
      <div className="bg-white shadow-sm">
        <div className="flex items-center justify-between p-4">
          <button className="p-2">
            <ChevronLeft className="w-6 h-6 text-gray-600" />
          </button>
          <div className="text-center">
            <div className="text-lg font-bold text-gray-800">일반 금융일기</div>
            <div className="text-xs text-gray-500">2025.07.06 일요일</div>
          </div>
          <button className="p-2">
            <BarChart3 className="w-5 h-5 text-gray-600" />
          </button>
        </div>
      </div>

      <div className="p-4 space-y-4">
        {/* 오늘의 금융 활동 요약 */}
        <div className="bg-white rounded-xl p-4 shadow-sm">
          <div className="flex items-center justify-between mb-3">
            <h3 className="font-bold text-gray-800">💳 오늘의 자동 연동 내역</h3>
            <span className="text-xs text-green-600">실시간 연동</span>
          </div>
          
          <div className="space-y-2">
            {todayTransactions.map((transaction, index) => (
              <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-2">
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs ${
                    transaction.type === 'income' ? 'bg-blue-100 text-blue-600' : 'bg-red-100 text-red-600'
                  }`}>
                    {transaction.type === 'income' ? '↓' : '↑'}
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-800">{transaction.name}</span>
                    <div className="text-xs text-gray-500">{transaction.category}</div>
                  </div>
                </div>
                <span className={`text-sm font-bold ${
                  transaction.type === 'income' ? 'text-blue-600' : 'text-red-600'
                }`}>
                  {transaction.amount}원
                </span>
              </div>
            ))}
          </div>
          
          <div className="mt-3 pt-3 border-t border-gray-200">
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">오늘 총 수입</span>
              <span className="font-bold text-blue-600">+2,450,000원</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">오늘 총 지출</span>
              <span className="font-bold text-red-600">-7,000원</span>
            </div>
          </div>
        </div>

        {/* 감정 선택 */}
        <div className="bg-white rounded-xl p-4 shadow-sm">
          <h3 className="font-bold text-gray-800 mb-3">🎭 오늘 돈 관리하면서 든 기분</h3>
          <div className="grid grid-cols-5 gap-2">
            {emotions.map((emotion) => (
              <button
                key={emotion.id}
                onClick={() => setSelectedEmotion(emotion.id)}
                className={`p-3 rounded-xl transition-all duration-200 ${
                  selectedEmotion === emotion.id 
                    ? 'transform scale-110 shadow-lg' 
                    : 'hover:scale-105'
                }`}
                style={{
                  backgroundColor: selectedEmotion === emotion.id ? `${emotion.color}20` : '#f9f9f9',
                  borderWidth: selectedEmotion === emotion.id ? '2px' : '1px',
                  borderColor: selectedEmotion === emotion.id ? emotion.color : '#e5e5e5'
                }}
              >
                <div className="text-2xl mb-1">{emotion.emoji}</div>
                <div className="text-xs font-medium text-gray-700">{emotion.name}</div>
              </button>
            ))}
          </div>
          
          {selectedEmotionData && (
            <div className="mt-3 p-3 rounded-lg" style={{ backgroundColor: `${selectedEmotionData.color}15` }}>
              <p className="text-sm text-gray-700">
                <span className="font-semibold" style={{ color: selectedEmotionData.color }}>
                  {selectedEmotionData.name}
                </span>
                와 함께 솔직한 금융 감정을 기록해보세요!
              </p>
            </div>
          )}
        </div>

        {/* 추가 수동 기록 */}
        <div className="bg-white rounded-xl p-4 shadow-sm">
          <h3 className="font-bold text-gray-800 mb-3">✏️ 수동으로 추가 기록</h3>
          <p className="text-xs text-gray-500 mb-3">현금 사용이나 미연동 카드 내역을 직접 입력하세요</p>
          
          {/* 거래 유형 선택 */}
          <div className="flex space-x-2 mb-3">
            <button 
              onClick={() => setTransactionType('expense')}
              className={`flex-1 py-2 px-3 rounded-lg border-2 transition-colors text-sm font-medium ${
                transactionType === 'expense' 
                  ? 'border-red-500 bg-red-50 text-red-700' 
                  : 'border-gray-200 text-gray-600'
              }`}
            >
              <TrendingDown className="w-4 h-4 inline mr-1" />
              지출
            </button>
            <button 
              onClick={() => setTransactionType('income')}
              className={`flex-1 py-2 px-3 rounded-lg border-2 transition-colors text-sm font-medium ${
                transactionType === 'income' 
                  ? 'border-blue-500 bg-blue-50 text-blue-700' 
                  : 'border-gray-200 text-gray-600'
              }`}
            >
              <TrendingUp className="w-4 h-4 inline mr-1" />
              수입
            </button>
          </div>

          {/* 카테고리 선택 */}
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-2">카테고리</label>
            <div className="grid grid-cols-4 gap-2">
              {currentCategories.map((cat) => (
                <button
                  key={cat.id}
                  onClick={() => setCategory(cat.id)}
                  className={`p-2 rounded-lg border-2 transition-all text-center ${
                    category === cat.id 
                      ? 'border-green-500 bg-green-50 text-green-700' 
                      : 'border-gray-200 bg-white text-gray-600'
                  }`}
                >
                  <div className="text-lg mb-1">{cat.emoji}</div>
                  <div className="text-xs font-medium">{cat.name}</div>
                </button>
              ))}
            </div>
          </div>

          {/* 금액 입력 */}
          <div className="relative">
            <input
              type="text"
              placeholder="금액을 입력하세요"
              value={amount}
              onChange={(e) => setAmount(formatAmount(e.target.value.replace(/,/g, '')))}
              className="w-full p-3 pr-8 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-right"
            />
            <span className="absolute right-3 top-3 text-gray-500">원</span>
          </div>
        </div>

        {/* 일기 작성 */}
        <div className="bg-white rounded-xl p-4 shadow-sm">
          <div className="flex items-center space-x-2 mb-3">
            {selectedEmotionData && <span className="text-xl">{selectedEmotionData.emoji}</span>}
            <h3 className="font-bold text-gray-800">📝 오늘의 금융 생각</h3>
          </div>
          
          <textarea
            placeholder={selectedEmotionData ? 
              `${selectedEmotionData.name}와 함께 오늘의 돈 관리에 대한 솔직한 생각을 적어보세요...` :
              "오늘의 소비, 수입, 저축에 대한 생각을 자유롭게 적어보세요..."
            }
            value={content}
            onChange={(e) => setContent(e.target.value)}
            rows={4}
            className="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 resize-none"
          />
          
          <div className="mt-2 text-xs text-gray-500">
            💡 예시: "오늘 커피값이 아까웠는데 기분전환에 도움됐어", "급여 들어와서 기뻤지만 곧 나갈 돈 생각하니 불안해"
          </div>
        </div>

        {/* 사진 추가 */}
        <div className="bg-white rounded-xl p-4 shadow-sm">
          <h3 className="font-bold text-gray-800 mb-3">📸 오늘의 금융 사진</h3>
          <button 
            onClick={() => setHasImage(!hasImage)}
            className="w-full h-24 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center hover:border-green-500 transition-colors"
          >
            {hasImage ? (
              <div className="text-center">
                <div className="w-16 h-16 bg-gray-200 rounded-lg mx-auto mb-2 flex items-center justify-center">
                  📷
                </div>
                <span className="text-sm text-gray-600">영수증, 통장 등 사진 추가됨</span>
              </div>
            ) : (
              <>
                <Camera className="w-6 h-6 text-gray-400 mb-1" />
                <span className="text-sm text-gray-500">영수증, 통장 사진 추가</span>
                <span className="text-xs text-green-600 mt-1">+15P 추가 적립</span>
              </>
            )}
          </button>
        </div>

        {/* 적립 포인트 - 일반 일기는 적음 */}
        <div className="bg-gradient-to-r from-blue-100 to-blue-200 rounded-xl p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Star className="w-5 h-5 text-blue-600" />
              <span className="font-bold text-gray-800">예상 적립 포인트</span>
            </div>
            <div className="text-right">
              <div className="text-lg font-bold text-blue-600">
                {30 + (hasImage ? 15 : 0)}P
              </div>
              <div className="text-xs text-gray-600">
                기본 30P {hasImage && '+ 사진 15P'}
              </div>
            </div>
          </div>
          <div className="mt-2 text-xs text-gray-600">
            💡 타임캡슐 연결 일기는 더 많은 포인트!
          </div>
        </div>
      </div>

      {/* 하단 저장 버튼 */}
      <div className="fixed bottom-0 left-0 right-0 max-w-md mx-auto bg-white border-t border-gray-200 p-4">
        <div className="flex space-x-3">
          <button className="flex-1 py-3 px-4 border-2 border-gray-300 text-gray-600 rounded-lg font-semibold">
            임시저장
          </button>
          <button 
            onClick={handleSave}
            disabled={!selectedEmotion}
            className={`flex-1 py-3 px-4 rounded-lg font-semibold ${
              selectedEmotion
                ? 'bg-blue-500 text-white'
                : 'bg-gray-300 text-gray-500'
            }`}
          >
            일반 일기 저장 💭
          </button>
        </div>
      </div>

      {/* 하단 여백 */}
      <div className="h-20"></div>
    </div>
  );
}